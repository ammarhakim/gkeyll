// Private header: not for direct use
#pragma once

#include <math.h>

#include <gkyl_array.h>
#include <gkyl_basis.h>
#include <gkyl_range.h>
#include <gkyl_util.h>
#include <assert.h>

static void 
kernel_vmap_1v(const double *dv, const double *v_cubic_dir[3], double* GKYL_RESTRICT vmap, double* GKYL_RESTRICT jacob_vel_inv, 
    double* GKYL_RESTRICT vmap_pgkyl, double* GKYL_RESTRICT jacob_vel_pgkyl, 
    double* GKYL_RESTRICT vmap_avg_pgkyl, double* GKYL_RESTRICT jacob_vel_avg_pgkyl, 
    double* GKYL_RESTRICT jacob_vel_gauss) 
{
  // dv : Velocity-space grid-spacing in computational space.     
  // v_cubic_dir: Cubic C^1 representation of the velocity mapping.
  // vmap: Velocity-space nonuniform mapping in each dimension.
  // jacob_vel_inv: Inverse of velocity space Jacobian in each dimension.
  // vmap_pgkyl: Velocity-space nonuniform mapping for I/O (defined in full 1V, 2V, or 3V).
  // jacob_vel_pgkyl: Velocity space Jacobian for I/O (defined in full 1V, 2V, or 3V).
  // vmap_avg_pgkyl: Cell average of velocity-space nonuniform mapping for I/O (defined in full 1V, 2V, or 3V).
  // jacob_vel_avg_pgkyl: Cell average of velocity space Jacobian for I/O (defined in full 1V, 2V, or 3V).
  // jacob_vel_gauss: Velocity space Jacobian at Gauss-Legendre quadrature points.
 
  double dv_tot = 1.0; 
  const double dv0 = 2.0/dv[0]; 
  dv_tot *= 2.0/dv[0]; 
  const double *v_cubic_dir0 = &v_cubic_dir[0][0]; 
  double *p0 = &vmap[0]; 
  double *vmap_pgkyl0 = &vmap_pgkyl[0]; 
  double *jacob_vel_inv0 = &jacob_vel_inv[0]; 
  p0[0] = v_cubic_dir0[0];
  p0[1] = v_cubic_dir0[1];
  p0[2] = v_cubic_dir0[2];
  p0[3] = v_cubic_dir0[3];

  double jacob_vel_inv_nodal0[3] = {0.0};
  jacob_vel_inv_nodal0[0] = 1.0/(dv0*(11.22497216032183*p0[3]-4.743416490252569*p0[2]+1.224744871391589*p0[1]));
  jacob_vel_inv_nodal0[1] = 1.0/(dv0*(1.224744871391589*p0[1]-2.806243040080455*p0[3]));
  jacob_vel_inv_nodal0[2] = 1.0/(dv0*(11.22497216032183*p0[3]+4.743416490252569*p0[2]+1.224744871391589*p0[1]));

  jacob_vel_inv0[0] = 0.2357022603955158*jacob_vel_inv_nodal0[2]+0.9428090415820636*jacob_vel_inv_nodal0[1]+0.2357022603955158*jacob_vel_inv_nodal0[0];
  jacob_vel_inv0[1] = 0.408248290463863*jacob_vel_inv_nodal0[2]-0.408248290463863*jacob_vel_inv_nodal0[0];
  jacob_vel_inv0[2] = 0.210818510677892*jacob_vel_inv_nodal0[2]-0.421637021355784*jacob_vel_inv_nodal0[1]+0.210818510677892*jacob_vel_inv_nodal0[0];

  vmap_pgkyl0[0] = p0[0]; 
  vmap_pgkyl0[1] = p0[1]; 
  vmap_pgkyl0[2] = p0[2]; 
  vmap_pgkyl0[3] = p0[3]; 

  vmap_avg_pgkyl[0] = p0[0]/sqrt(2.0); 

  jacob_vel_pgkyl[0] = dv_tot*(2.645751311064591*p0[3]+1.732050807568877*p0[1]);
  jacob_vel_pgkyl[1] = dv_tot*(3.872983346207417*p0[2]);
  jacob_vel_pgkyl[2] = dv_tot*(5.916079783099617*p0[3]);

  jacob_vel_avg_pgkyl[0] = jacob_vel_pgkyl[0]/sqrt(2.0);

  jacob_vel_gauss[0] = dv_tot*(5.612486080160912*p0[3]-3.674234614174766*p0[2]+1.224744871391589*p0[1]);
  jacob_vel_gauss[1] = dv_tot*(1.224744871391589*p0[1]-2.806243040080455*p0[3]);
  jacob_vel_gauss[2] = dv_tot*(5.612486080160912*p0[3]+3.674234614174766*p0[2]+1.224744871391589*p0[1]);
}

static void 
kernel_vmap_2v(const double *dv, const double *v_cubic_dir[3], double* GKYL_RESTRICT vmap, double* GKYL_RESTRICT jacob_vel_inv, 
    double* GKYL_RESTRICT vmap_pgkyl, double* GKYL_RESTRICT jacob_vel_pgkyl, 
    double* GKYL_RESTRICT vmap_avg_pgkyl, double* GKYL_RESTRICT jacob_vel_avg_pgkyl, 
    double* GKYL_RESTRICT jacob_vel_gauss) 
{
  // dv : Velocity-space grid-spacing in computational space.     
  // v_cubic_dir: Cubic C^1 representation of the velocity mapping.
  // vmap: Velocity-space nonuniform mapping in each dimension.
  // jacob_vel_inv: Inverse of velocity space Jacobian in each dimension.
  // vmap_pgkyl: Velocity-space nonuniform mapping for I/O (defined in full 1V, 2V, or 3V).
  // jacob_vel_pgkyl: Velocity space Jacobian for I/O (defined in full 1V, 2V, or 3V).
  // vmap_avg_pgkyl: Cell average of velocity-space nonuniform mapping for I/O (defined in full 1V, 2V, or 3V).
  // jacob_vel_avg_pgkyl: Cell average of velocity space Jacobian for I/O (defined in full 1V, 2V, or 3V).
  // jacob_vel_gauss: Velocity space Jacobian at Gauss-Legendre quadrature points.
 
  double dv_tot = 1.0; 
  const double dv0 = 2.0/dv[0]; 
  dv_tot *= 2.0/dv[0]; 
  const double *v_cubic_dir0 = &v_cubic_dir[0][0]; 
  double *p0 = &vmap[0]; 
  double *vmap_pgkyl0 = &vmap_pgkyl[0]; 
  double *jacob_vel_inv0 = &jacob_vel_inv[0]; 
  const double dv1 = 2.0/dv[1]; 
  dv_tot *= 2.0/dv[1]; 
  const double *v_cubic_dir1 = &v_cubic_dir[1][0]; 
  double *p1 = &vmap[4]; 
  double *vmap_pgkyl1 = &vmap_pgkyl[12]; 
  double *jacob_vel_inv1 = &jacob_vel_inv[3]; 
  p0[0] = v_cubic_dir0[0];
  p0[1] = v_cubic_dir0[1];
  p0[2] = v_cubic_dir0[2];
  p0[3] = v_cubic_dir0[3];

  double jacob_vel_inv_nodal0[3] = {0.0};
  jacob_vel_inv_nodal0[0] = 1.0/(dv0*(11.22497216032183*p0[3]-4.743416490252569*p0[2]+1.224744871391589*p0[1]));
  jacob_vel_inv_nodal0[1] = 1.0/(dv0*(1.224744871391589*p0[1]-2.806243040080455*p0[3]));
  jacob_vel_inv_nodal0[2] = 1.0/(dv0*(11.22497216032183*p0[3]+4.743416490252569*p0[2]+1.224744871391589*p0[1]));

  jacob_vel_inv0[0] = 0.2357022603955158*jacob_vel_inv_nodal0[2]+0.9428090415820636*jacob_vel_inv_nodal0[1]+0.2357022603955158*jacob_vel_inv_nodal0[0];
  jacob_vel_inv0[1] = 0.408248290463863*jacob_vel_inv_nodal0[2]-0.408248290463863*jacob_vel_inv_nodal0[0];
  jacob_vel_inv0[2] = 0.210818510677892*jacob_vel_inv_nodal0[2]-0.421637021355784*jacob_vel_inv_nodal0[1]+0.210818510677892*jacob_vel_inv_nodal0[0];

  p1[0] = v_cubic_dir1[0];
  p1[1] = v_cubic_dir1[1];
  p1[2] = v_cubic_dir1[2];
  p1[3] = v_cubic_dir1[3];

  double jacob_vel_inv_nodal1[3] = {0.0};
  jacob_vel_inv_nodal1[0] = 1.0/(dv1*(11.22497216032183*p1[3]-4.743416490252569*p1[2]+1.224744871391589*p1[1]));
  jacob_vel_inv_nodal1[1] = 1.0/(dv1*(1.224744871391589*p1[1]-2.806243040080455*p1[3]));
  jacob_vel_inv_nodal1[2] = 1.0/(dv1*(11.22497216032183*p1[3]+4.743416490252569*p1[2]+1.224744871391589*p1[1]));

  jacob_vel_inv1[0] = 0.2357022603955158*jacob_vel_inv_nodal1[2]+0.9428090415820636*jacob_vel_inv_nodal1[1]+0.2357022603955158*jacob_vel_inv_nodal1[0];
  jacob_vel_inv1[1] = 0.408248290463863*jacob_vel_inv_nodal1[2]-0.408248290463863*jacob_vel_inv_nodal1[0];
  jacob_vel_inv1[2] = 0.210818510677892*jacob_vel_inv_nodal1[2]-0.421637021355784*jacob_vel_inv_nodal1[1]+0.210818510677892*jacob_vel_inv_nodal1[0];

  vmap_pgkyl0[0] = 1.414213562373095*p0[0]; 
  vmap_pgkyl0[1] = 1.414213562373095*p0[1]; 
  vmap_pgkyl0[4] = 1.414213562373095*p0[2]; 
  vmap_pgkyl0[8] = 1.414213562373095*p0[3]; 
  vmap_pgkyl1[0] = 1.414213562373095*p1[0]; 
  vmap_pgkyl1[2] = 1.414213562373095*p1[1]; 
  vmap_pgkyl1[5] = 1.414213562373095*p1[2]; 
  vmap_pgkyl1[9] = 1.414213562373095*p1[3]; 

  vmap_avg_pgkyl[0] = p0[0]/2.0; 
  vmap_avg_pgkyl[1] = p1[0]/2.0; 

  jacob_vel_pgkyl[0] = dv_tot*(7.0*p0[3]*p1[3]+4.58257569495584*p0[1]*p1[3]+4.58257569495584*p1[1]*p0[3]+3.0*p0[1]*p1[1]);
  jacob_vel_pgkyl[1] = dv_tot*(10.2469507659596*p0[2]*p1[3]+6.708203932499369*p1[1]*p0[2]);
  jacob_vel_pgkyl[2] = dv_tot*(10.2469507659596*p1[2]*p0[3]+6.708203932499369*p0[1]*p1[2]);
  jacob_vel_pgkyl[3] = dv_tot*(15.0*p0[2]*p1[2]);
  jacob_vel_pgkyl[4] = dv_tot*(15.65247584249853*p0[3]*p1[3]+10.2469507659596*p1[1]*p0[3]);
  jacob_vel_pgkyl[5] = dv_tot*(15.65247584249853*p0[3]*p1[3]+10.2469507659596*p0[1]*p1[3]);
  jacob_vel_pgkyl[6] = dv_tot*(22.91287847477921*p1[2]*p0[3]);
  jacob_vel_pgkyl[7] = dv_tot*(22.91287847477921*p0[2]*p1[3]);
  jacob_vel_pgkyl[8] = dv_tot*(35.0*p0[3]*p1[3]);

  jacob_vel_avg_pgkyl[0] = jacob_vel_pgkyl[0]/2.0;

  jacob_vel_gauss[0] = dv_tot*(31.5*p0[3]*p1[3]-20.62159062730127*p0[2]*p1[3]+6.873863542433759*p0[1]*p1[3]-20.62159062730127*p1[2]*p0[3]+6.873863542433759*p1[1]*p0[3]+13.5*p0[2]*p1[2]-4.5*p0[1]*p1[2]-4.5*p1[1]*p0[2]+1.5*p0[1]*p1[1]);
  jacob_vel_gauss[1] = dv_tot*((-15.75*p0[3]*p1[3])+10.31079531365064*p0[2]*p1[3]-3.43693177121688*p0[1]*p1[3]+6.873863542433759*p1[1]*p0[3]-4.5*p1[1]*p0[2]+1.5*p0[1]*p1[1]);
  jacob_vel_gauss[2] = dv_tot*(31.5*p0[3]*p1[3]-20.62159062730127*p0[2]*p1[3]+6.873863542433759*p0[1]*p1[3]+20.62159062730127*p1[2]*p0[3]+6.873863542433759*p1[1]*p0[3]-13.5*p0[2]*p1[2]+4.5*p0[1]*p1[2]-4.5*p1[1]*p0[2]+1.5*p0[1]*p1[1]);
  jacob_vel_gauss[3] = dv_tot*((-15.75*p0[3]*p1[3])+6.873863542433759*p0[1]*p1[3]+10.31079531365064*p1[2]*p0[3]-3.43693177121688*p1[1]*p0[3]-4.5*p0[1]*p1[2]+1.5*p0[1]*p1[1]);
  jacob_vel_gauss[4] = dv_tot*(7.875*p0[3]*p1[3]-3.43693177121688*p0[1]*p1[3]-3.43693177121688*p1[1]*p0[3]+1.5*p0[1]*p1[1]);
  jacob_vel_gauss[5] = dv_tot*((-15.75*p0[3]*p1[3])+6.873863542433759*p0[1]*p1[3]-10.31079531365064*p1[2]*p0[3]-3.43693177121688*p1[1]*p0[3]+4.5*p0[1]*p1[2]+1.5*p0[1]*p1[1]);
  jacob_vel_gauss[6] = dv_tot*(31.5*p0[3]*p1[3]+20.62159062730127*p0[2]*p1[3]+6.873863542433759*p0[1]*p1[3]-20.62159062730127*p1[2]*p0[3]+6.873863542433759*p1[1]*p0[3]-13.5*p0[2]*p1[2]-4.5*p0[1]*p1[2]+4.5*p1[1]*p0[2]+1.5*p0[1]*p1[1]);
  jacob_vel_gauss[7] = dv_tot*((-15.75*p0[3]*p1[3])-10.31079531365064*p0[2]*p1[3]-3.43693177121688*p0[1]*p1[3]+6.873863542433759*p1[1]*p0[3]+4.5*p1[1]*p0[2]+1.5*p0[1]*p1[1]);
  jacob_vel_gauss[8] = dv_tot*(31.5*p0[3]*p1[3]+20.62159062730127*p0[2]*p1[3]+6.873863542433759*p0[1]*p1[3]+20.62159062730127*p1[2]*p0[3]+6.873863542433759*p1[1]*p0[3]+13.5*p0[2]*p1[2]+4.5*p0[1]*p1[2]+4.5*p1[1]*p0[2]+1.5*p0[1]*p1[1]);
}

static void 
kernel_vmap_3v(const double *dv, const double *v_cubic_dir[3], double* GKYL_RESTRICT vmap, double* GKYL_RESTRICT jacob_vel_inv, 
    double* GKYL_RESTRICT vmap_pgkyl, double* GKYL_RESTRICT jacob_vel_pgkyl, 
    double* GKYL_RESTRICT vmap_avg_pgkyl, double* GKYL_RESTRICT jacob_vel_avg_pgkyl, 
    double* GKYL_RESTRICT jacob_vel_gauss) 
{
  // dv : Velocity-space grid-spacing in computational space.     
  // v_cubic_dir: Cubic C^1 representation of the velocity mapping.
  // vmap: Velocity-space nonuniform mapping in each dimension.
  // jacob_vel_inv: Inverse of velocity space Jacobian in each dimension.
  // vmap_pgkyl: Velocity-space nonuniform mapping for I/O (defined in full 1V, 2V, or 3V).
  // jacob_vel_pgkyl: Velocity space Jacobian for I/O (defined in full 1V, 2V, or 3V).
  // vmap_avg_pgkyl: Cell average of velocity-space nonuniform mapping for I/O (defined in full 1V, 2V, or 3V).
  // jacob_vel_avg_pgkyl: Cell average of velocity space Jacobian for I/O (defined in full 1V, 2V, or 3V).
  // jacob_vel_gauss: Velocity space Jacobian at Gauss-Legendre quadrature points.
 
  double dv_tot = 1.0; 
  const double dv0 = 2.0/dv[0]; 
  dv_tot *= 2.0/dv[0]; 
  const double *v_cubic_dir0 = &v_cubic_dir[0][0]; 
  double *p0 = &vmap[0]; 
  double *vmap_pgkyl0 = &vmap_pgkyl[0]; 
  double *jacob_vel_inv0 = &jacob_vel_inv[0]; 
  const double dv1 = 2.0/dv[1]; 
  dv_tot *= 2.0/dv[1]; 
  const double *v_cubic_dir1 = &v_cubic_dir[1][0]; 
  double *p1 = &vmap[4]; 
  double *vmap_pgkyl1 = &vmap_pgkyl[32]; 
  double *jacob_vel_inv1 = &jacob_vel_inv[3]; 
  const double dv2 = 2.0/dv[2]; 
  dv_tot *= 2.0/dv[2]; 
  const double *v_cubic_dir2 = &v_cubic_dir[2][0]; 
  double *p2 = &vmap[8]; 
  double *vmap_pgkyl2 = &vmap_pgkyl[64]; 
  double *jacob_vel_inv2 = &jacob_vel_inv[6]; 
  p0[0] = v_cubic_dir0[0];
  p0[1] = v_cubic_dir0[1];
  p0[2] = v_cubic_dir0[2];
  p0[3] = v_cubic_dir0[3];

  double jacob_vel_inv_nodal0[3] = {0.0};
  jacob_vel_inv_nodal0[0] = 1.0/(dv0*(11.22497216032183*p0[3]-4.743416490252569*p0[2]+1.224744871391589*p0[1]));
  jacob_vel_inv_nodal0[1] = 1.0/(dv0*(1.224744871391589*p0[1]-2.806243040080455*p0[3]));
  jacob_vel_inv_nodal0[2] = 1.0/(dv0*(11.22497216032183*p0[3]+4.743416490252569*p0[2]+1.224744871391589*p0[1]));

  jacob_vel_inv0[0] = 0.2357022603955158*jacob_vel_inv_nodal0[2]+0.9428090415820636*jacob_vel_inv_nodal0[1]+0.2357022603955158*jacob_vel_inv_nodal0[0];
  jacob_vel_inv0[1] = 0.408248290463863*jacob_vel_inv_nodal0[2]-0.408248290463863*jacob_vel_inv_nodal0[0];
  jacob_vel_inv0[2] = 0.210818510677892*jacob_vel_inv_nodal0[2]-0.421637021355784*jacob_vel_inv_nodal0[1]+0.210818510677892*jacob_vel_inv_nodal0[0];

  p1[0] = v_cubic_dir1[0];
  p1[1] = v_cubic_dir1[1];
  p1[2] = v_cubic_dir1[2];
  p1[3] = v_cubic_dir1[3];

  double jacob_vel_inv_nodal1[3] = {0.0};
  jacob_vel_inv_nodal1[0] = 1.0/(dv1*(11.22497216032183*p1[3]-4.743416490252569*p1[2]+1.224744871391589*p1[1]));
  jacob_vel_inv_nodal1[1] = 1.0/(dv1*(1.224744871391589*p1[1]-2.806243040080455*p1[3]));
  jacob_vel_inv_nodal1[2] = 1.0/(dv1*(11.22497216032183*p1[3]+4.743416490252569*p1[2]+1.224744871391589*p1[1]));

  jacob_vel_inv1[0] = 0.2357022603955158*jacob_vel_inv_nodal1[2]+0.9428090415820636*jacob_vel_inv_nodal1[1]+0.2357022603955158*jacob_vel_inv_nodal1[0];
  jacob_vel_inv1[1] = 0.408248290463863*jacob_vel_inv_nodal1[2]-0.408248290463863*jacob_vel_inv_nodal1[0];
  jacob_vel_inv1[2] = 0.210818510677892*jacob_vel_inv_nodal1[2]-0.421637021355784*jacob_vel_inv_nodal1[1]+0.210818510677892*jacob_vel_inv_nodal1[0];

  p2[0] = v_cubic_dir2[0];
  p2[1] = v_cubic_dir2[1];
  p2[2] = v_cubic_dir2[2];
  p2[3] = v_cubic_dir2[3];

  double jacob_vel_inv_nodal2[3] = {0.0};
  jacob_vel_inv_nodal2[0] = 1.0/(dv2*(11.22497216032183*p2[3]-4.743416490252569*p2[2]+1.224744871391589*p2[1]));
  jacob_vel_inv_nodal2[1] = 1.0/(dv2*(1.224744871391589*p2[1]-2.806243040080455*p2[3]));
  jacob_vel_inv_nodal2[2] = 1.0/(dv2*(11.22497216032183*p2[3]+4.743416490252569*p2[2]+1.224744871391589*p2[1]));

  jacob_vel_inv2[0] = 0.2357022603955158*jacob_vel_inv_nodal2[2]+0.9428090415820636*jacob_vel_inv_nodal2[1]+0.2357022603955158*jacob_vel_inv_nodal2[0];
  jacob_vel_inv2[1] = 0.408248290463863*jacob_vel_inv_nodal2[2]-0.408248290463863*jacob_vel_inv_nodal2[0];
  jacob_vel_inv2[2] = 0.210818510677892*jacob_vel_inv_nodal2[2]-0.421637021355784*jacob_vel_inv_nodal2[1]+0.210818510677892*jacob_vel_inv_nodal2[0];

  vmap_pgkyl0[0] = 2.0*p0[0]; 
  vmap_pgkyl0[1] = 2.0*p0[1]; 
  vmap_pgkyl0[7] = 2.0*p0[2]; 
  vmap_pgkyl0[17] = 2.0*p0[3]; 
  vmap_pgkyl1[0] = 2.0*p1[0]; 
  vmap_pgkyl1[2] = 2.0*p1[1]; 
  vmap_pgkyl1[8] = 2.0*p1[2]; 
  vmap_pgkyl1[18] = 2.0*p1[3]; 
  vmap_pgkyl2[0] = 2.0*p2[0]; 
  vmap_pgkyl2[3] = 2.0*p2[1]; 
  vmap_pgkyl2[9] = 2.0*p2[2]; 
  vmap_pgkyl2[19] = 2.0*p2[3]; 

  vmap_avg_pgkyl[0] = p0[0]/(2.0*sqrt(2.0)); 
  vmap_avg_pgkyl[1] = p1[0]/(2.0*sqrt(2.0)); 
  vmap_avg_pgkyl[2] = p2[0]/(2.0*sqrt(2.0)); 

  jacob_vel_pgkyl[0] = dv_tot*(18.52025917745214*p0[3]*p1[3]*p2[3]+12.12435565298214*p0[1]*p1[3]*p2[3]+12.12435565298214*p1[1]*p0[3]*p2[3]+7.937253933193772*p0[1]*p1[1]*p2[3]+12.12435565298214*p2[1]*p0[3]*p1[3]+7.937253933193772*p0[1]*p2[1]*p1[3]+7.937253933193772*p1[1]*p2[1]*p0[3]+5.196152422706631*p0[1]*p1[1]*p2[1]);
  jacob_vel_pgkyl[1] = dv_tot*(27.11088342345192*p0[2]*p1[3]*p2[3]+17.74823934929885*p1[1]*p0[2]*p2[3]+17.74823934929885*p2[1]*p0[2]*p1[3]+11.61895003862225*p1[1]*p2[1]*p0[2]);
  jacob_vel_pgkyl[2] = dv_tot*(27.11088342345192*p1[2]*p0[3]*p2[3]+17.74823934929885*p0[1]*p1[2]*p2[3]+17.74823934929885*p2[1]*p1[2]*p0[3]+11.61895003862225*p0[1]*p2[1]*p1[2]);
  jacob_vel_pgkyl[3] = dv_tot*(27.11088342345192*p2[2]*p0[3]*p1[3]+17.74823934929885*p0[1]*p2[2]*p1[3]+17.74823934929885*p1[1]*p2[2]*p0[3]+11.61895003862225*p0[1]*p1[1]*p2[2]);
  jacob_vel_pgkyl[4] = dv_tot*(39.68626966596886*p0[2]*p1[2]*p2[3]+25.98076211353316*p2[1]*p0[2]*p1[2]);
  jacob_vel_pgkyl[5] = dv_tot*(39.68626966596886*p0[2]*p2[2]*p1[3]+25.98076211353316*p1[1]*p0[2]*p2[2]);
  jacob_vel_pgkyl[6] = dv_tot*(39.68626966596886*p1[2]*p2[2]*p0[3]+25.98076211353316*p0[1]*p1[2]*p2[2]);
  jacob_vel_pgkyl[7] = dv_tot*(41.41255848169732*p0[3]*p1[3]*p2[3]+27.11088342345192*p1[1]*p0[3]*p2[3]+27.11088342345192*p2[1]*p0[3]*p1[3]+17.74823934929885*p1[1]*p2[1]*p0[3]);
  jacob_vel_pgkyl[8] = dv_tot*(41.41255848169732*p0[3]*p1[3]*p2[3]+27.11088342345192*p0[1]*p1[3]*p2[3]+27.11088342345192*p2[1]*p0[3]*p1[3]+17.74823934929885*p0[1]*p2[1]*p1[3]);
  jacob_vel_pgkyl[9] = dv_tot*(41.41255848169732*p0[3]*p1[3]*p2[3]+27.11088342345192*p0[1]*p1[3]*p2[3]+27.11088342345192*p1[1]*p0[3]*p2[3]+17.74823934929885*p0[1]*p1[1]*p2[3]);
  jacob_vel_pgkyl[10] = dv_tot*(58.09475019311126*p0[2]*p1[2]*p2[2]);
  jacob_vel_pgkyl[11] = dv_tot*(60.62177826491071*p1[2]*p0[3]*p2[3]+39.68626966596887*p2[1]*p1[2]*p0[3]);
  jacob_vel_pgkyl[12] = dv_tot*(60.62177826491071*p0[2]*p1[3]*p2[3]+39.68626966596887*p2[1]*p0[2]*p1[3]);
  jacob_vel_pgkyl[13] = dv_tot*(60.62177826491071*p2[2]*p0[3]*p1[3]+39.68626966596887*p1[1]*p2[2]*p0[3]);
  jacob_vel_pgkyl[14] = dv_tot*(60.62177826491071*p2[2]*p0[3]*p1[3]+39.68626966596887*p0[1]*p2[2]*p1[3]);
  jacob_vel_pgkyl[15] = dv_tot*(60.62177826491071*p0[2]*p1[3]*p2[3]+39.68626966596887*p1[1]*p0[2]*p2[3]);
  jacob_vel_pgkyl[16] = dv_tot*(60.62177826491071*p1[2]*p0[3]*p2[3]+39.68626966596887*p0[1]*p1[2]*p2[3]);
  jacob_vel_pgkyl[17] = dv_tot*(88.74119674649425*p1[2]*p2[2]*p0[3]);
  jacob_vel_pgkyl[18] = dv_tot*(88.74119674649425*p0[2]*p2[2]*p1[3]);
  jacob_vel_pgkyl[19] = dv_tot*(88.74119674649425*p0[2]*p1[2]*p2[3]);
  jacob_vel_pgkyl[20] = dv_tot*(92.60129588726068*p0[3]*p1[3]*p2[3]+60.6217782649107*p2[1]*p0[3]*p1[3]);
  jacob_vel_pgkyl[21] = dv_tot*(92.60129588726068*p0[3]*p1[3]*p2[3]+60.6217782649107*p1[1]*p0[3]*p2[3]);
  jacob_vel_pgkyl[22] = dv_tot*(92.60129588726068*p0[3]*p1[3]*p2[3]+60.6217782649107*p0[1]*p1[3]*p2[3]);
  jacob_vel_pgkyl[23] = dv_tot*(135.5544171172596*p2[2]*p0[3]*p1[3]);
  jacob_vel_pgkyl[24] = dv_tot*(135.5544171172596*p1[2]*p0[3]*p2[3]);
  jacob_vel_pgkyl[25] = dv_tot*(135.5544171172596*p0[2]*p1[3]*p2[3]);
  jacob_vel_pgkyl[26] = dv_tot*(207.0627924084866*p0[3]*p1[3]*p2[3]);

  jacob_vel_avg_pgkyl[0] = jacob_vel_pgkyl[0]/(2.0*sqrt(2.0)); 

  jacob_vel_gauss[0] = dv_tot*(176.7933115250687*p0[3]*p1[3]*p2[3]-115.7383903465051*p0[2]*p1[3]*p2[3]+38.57946344883504*p0[1]*p1[3]*p2[3]-115.7383903465051*p1[2]*p0[3]*p2[3]+38.57946344883504*p1[1]*p0[3]*p2[3]+75.7685620821723*p0[2]*p1[2]*p2[3]-25.2561873607241*p0[1]*p1[2]*p2[3]-25.2561873607241*p1[1]*p0[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]-115.7383903465051*p2[2]*p0[3]*p1[3]+38.57946344883504*p2[1]*p0[3]*p1[3]+75.7685620821723*p0[2]*p2[2]*p1[3]-25.2561873607241*p0[1]*p2[2]*p1[3]-25.2561873607241*p2[1]*p0[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]+75.7685620821723*p1[2]*p2[2]*p0[3]-25.2561873607241*p1[1]*p2[2]*p0[3]-25.2561873607241*p2[1]*p1[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]-49.60216729135932*p0[2]*p1[2]*p2[2]+16.53405576378644*p0[1]*p1[2]*p2[2]+16.53405576378644*p1[1]*p0[2]*p2[2]-5.511351921262148*p0[1]*p1[1]*p2[2]+16.53405576378644*p2[1]*p0[2]*p1[2]-5.511351921262148*p0[1]*p2[1]*p1[2]-5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[1] = dv_tot*((-88.39665576253434*p0[3]*p1[3]*p2[3])+57.86919517325254*p0[2]*p1[3]*p2[3]-19.28973172441751*p0[1]*p1[3]*p2[3]+57.86919517325254*p1[2]*p0[3]*p2[3]-19.28973172441751*p1[1]*p0[3]*p2[3]-37.88428104108615*p0[2]*p1[2]*p2[3]+12.62809368036205*p0[1]*p1[2]*p2[3]+12.62809368036205*p1[1]*p0[2]*p2[3]-4.209364560120682*p0[1]*p1[1]*p2[3]+38.57946344883504*p2[1]*p0[3]*p1[3]-25.2561873607241*p2[1]*p0[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]-25.2561873607241*p2[1]*p1[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]+16.53405576378644*p2[1]*p0[2]*p1[2]-5.511351921262148*p0[1]*p2[1]*p1[2]-5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[2] = dv_tot*(176.7933115250687*p0[3]*p1[3]*p2[3]-115.7383903465051*p0[2]*p1[3]*p2[3]+38.57946344883504*p0[1]*p1[3]*p2[3]-115.7383903465051*p1[2]*p0[3]*p2[3]+38.57946344883504*p1[1]*p0[3]*p2[3]+75.7685620821723*p0[2]*p1[2]*p2[3]-25.2561873607241*p0[1]*p1[2]*p2[3]-25.2561873607241*p1[1]*p0[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]+115.7383903465051*p2[2]*p0[3]*p1[3]+38.57946344883504*p2[1]*p0[3]*p1[3]-75.7685620821723*p0[2]*p2[2]*p1[3]+25.2561873607241*p0[1]*p2[2]*p1[3]-25.2561873607241*p2[1]*p0[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]-75.7685620821723*p1[2]*p2[2]*p0[3]+25.2561873607241*p1[1]*p2[2]*p0[3]-25.2561873607241*p2[1]*p1[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]+49.60216729135932*p0[2]*p1[2]*p2[2]-16.53405576378644*p0[1]*p1[2]*p2[2]-16.53405576378644*p1[1]*p0[2]*p2[2]+5.511351921262148*p0[1]*p1[1]*p2[2]+16.53405576378644*p2[1]*p0[2]*p1[2]-5.511351921262148*p0[1]*p2[1]*p1[2]-5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[3] = dv_tot*((-88.39665576253434*p0[3]*p1[3]*p2[3])+57.86919517325254*p0[2]*p1[3]*p2[3]-19.28973172441751*p0[1]*p1[3]*p2[3]+38.57946344883504*p1[1]*p0[3]*p2[3]-25.2561873607241*p1[1]*p0[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]+57.86919517325254*p2[2]*p0[3]*p1[3]-19.28973172441751*p2[1]*p0[3]*p1[3]-37.88428104108615*p0[2]*p2[2]*p1[3]+12.62809368036205*p0[1]*p2[2]*p1[3]+12.62809368036205*p2[1]*p0[2]*p1[3]-4.209364560120682*p0[1]*p2[1]*p1[3]-25.2561873607241*p1[1]*p2[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]+16.53405576378644*p1[1]*p0[2]*p2[2]-5.511351921262148*p0[1]*p1[1]*p2[2]-5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[4] = dv_tot*(44.19832788126717*p0[3]*p1[3]*p2[3]-28.93459758662627*p0[2]*p1[3]*p2[3]+9.644865862208757*p0[1]*p1[3]*p2[3]-19.28973172441751*p1[1]*p0[3]*p2[3]+12.62809368036205*p1[1]*p0[2]*p2[3]-4.209364560120682*p0[1]*p1[1]*p2[3]-19.28973172441751*p2[1]*p0[3]*p1[3]+12.62809368036205*p2[1]*p0[2]*p1[3]-4.209364560120682*p0[1]*p2[1]*p1[3]+8.418729120241366*p1[1]*p2[1]*p0[3]-5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[5] = dv_tot*((-88.39665576253434*p0[3]*p1[3]*p2[3])+57.86919517325254*p0[2]*p1[3]*p2[3]-19.28973172441751*p0[1]*p1[3]*p2[3]+38.57946344883504*p1[1]*p0[3]*p2[3]-25.2561873607241*p1[1]*p0[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]-57.86919517325254*p2[2]*p0[3]*p1[3]-19.28973172441751*p2[1]*p0[3]*p1[3]+37.88428104108615*p0[2]*p2[2]*p1[3]-12.62809368036205*p0[1]*p2[2]*p1[3]+12.62809368036205*p2[1]*p0[2]*p1[3]-4.209364560120682*p0[1]*p2[1]*p1[3]+25.2561873607241*p1[1]*p2[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]-16.53405576378644*p1[1]*p0[2]*p2[2]+5.511351921262148*p0[1]*p1[1]*p2[2]-5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[6] = dv_tot*(176.7933115250687*p0[3]*p1[3]*p2[3]-115.7383903465051*p0[2]*p1[3]*p2[3]+38.57946344883504*p0[1]*p1[3]*p2[3]+115.7383903465051*p1[2]*p0[3]*p2[3]+38.57946344883504*p1[1]*p0[3]*p2[3]-75.7685620821723*p0[2]*p1[2]*p2[3]+25.2561873607241*p0[1]*p1[2]*p2[3]-25.2561873607241*p1[1]*p0[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]-115.7383903465051*p2[2]*p0[3]*p1[3]+38.57946344883504*p2[1]*p0[3]*p1[3]+75.7685620821723*p0[2]*p2[2]*p1[3]-25.2561873607241*p0[1]*p2[2]*p1[3]-25.2561873607241*p2[1]*p0[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]-75.7685620821723*p1[2]*p2[2]*p0[3]-25.2561873607241*p1[1]*p2[2]*p0[3]+25.2561873607241*p2[1]*p1[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]+49.60216729135932*p0[2]*p1[2]*p2[2]-16.53405576378644*p0[1]*p1[2]*p2[2]+16.53405576378644*p1[1]*p0[2]*p2[2]-5.511351921262148*p0[1]*p1[1]*p2[2]-16.53405576378644*p2[1]*p0[2]*p1[2]+5.511351921262148*p0[1]*p2[1]*p1[2]-5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[7] = dv_tot*((-88.39665576253434*p0[3]*p1[3]*p2[3])+57.86919517325254*p0[2]*p1[3]*p2[3]-19.28973172441751*p0[1]*p1[3]*p2[3]-57.86919517325254*p1[2]*p0[3]*p2[3]-19.28973172441751*p1[1]*p0[3]*p2[3]+37.88428104108615*p0[2]*p1[2]*p2[3]-12.62809368036205*p0[1]*p1[2]*p2[3]+12.62809368036205*p1[1]*p0[2]*p2[3]-4.209364560120682*p0[1]*p1[1]*p2[3]+38.57946344883504*p2[1]*p0[3]*p1[3]-25.2561873607241*p2[1]*p0[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]+25.2561873607241*p2[1]*p1[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]-16.53405576378644*p2[1]*p0[2]*p1[2]+5.511351921262148*p0[1]*p2[1]*p1[2]-5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[8] = dv_tot*(176.7933115250687*p0[3]*p1[3]*p2[3]-115.7383903465051*p0[2]*p1[3]*p2[3]+38.57946344883504*p0[1]*p1[3]*p2[3]+115.7383903465051*p1[2]*p0[3]*p2[3]+38.57946344883504*p1[1]*p0[3]*p2[3]-75.7685620821723*p0[2]*p1[2]*p2[3]+25.2561873607241*p0[1]*p1[2]*p2[3]-25.2561873607241*p1[1]*p0[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]+115.7383903465051*p2[2]*p0[3]*p1[3]+38.57946344883504*p2[1]*p0[3]*p1[3]-75.7685620821723*p0[2]*p2[2]*p1[3]+25.2561873607241*p0[1]*p2[2]*p1[3]-25.2561873607241*p2[1]*p0[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]+75.7685620821723*p1[2]*p2[2]*p0[3]+25.2561873607241*p1[1]*p2[2]*p0[3]+25.2561873607241*p2[1]*p1[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]-49.60216729135932*p0[2]*p1[2]*p2[2]+16.53405576378644*p0[1]*p1[2]*p2[2]-16.53405576378644*p1[1]*p0[2]*p2[2]+5.511351921262148*p0[1]*p1[1]*p2[2]-16.53405576378644*p2[1]*p0[2]*p1[2]+5.511351921262148*p0[1]*p2[1]*p1[2]-5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[9] = dv_tot*((-88.39665576253434*p0[3]*p1[3]*p2[3])+38.57946344883504*p0[1]*p1[3]*p2[3]+57.86919517325254*p1[2]*p0[3]*p2[3]-19.28973172441751*p1[1]*p0[3]*p2[3]-25.2561873607241*p0[1]*p1[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]+57.86919517325254*p2[2]*p0[3]*p1[3]-19.28973172441751*p2[1]*p0[3]*p1[3]-25.2561873607241*p0[1]*p2[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]-37.88428104108615*p1[2]*p2[2]*p0[3]+12.62809368036205*p1[1]*p2[2]*p0[3]+12.62809368036205*p2[1]*p1[2]*p0[3]-4.209364560120682*p1[1]*p2[1]*p0[3]+16.53405576378644*p0[1]*p1[2]*p2[2]-5.511351921262148*p0[1]*p1[1]*p2[2]-5.511351921262148*p0[1]*p2[1]*p1[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[10] = dv_tot*(44.19832788126717*p0[3]*p1[3]*p2[3]-19.28973172441751*p0[1]*p1[3]*p2[3]-28.93459758662627*p1[2]*p0[3]*p2[3]+9.644865862208757*p1[1]*p0[3]*p2[3]+12.62809368036205*p0[1]*p1[2]*p2[3]-4.209364560120682*p0[1]*p1[1]*p2[3]-19.28973172441751*p2[1]*p0[3]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]+12.62809368036205*p2[1]*p1[2]*p0[3]-4.209364560120682*p1[1]*p2[1]*p0[3]-5.511351921262148*p0[1]*p2[1]*p1[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[11] = dv_tot*((-88.39665576253434*p0[3]*p1[3]*p2[3])+38.57946344883504*p0[1]*p1[3]*p2[3]+57.86919517325254*p1[2]*p0[3]*p2[3]-19.28973172441751*p1[1]*p0[3]*p2[3]-25.2561873607241*p0[1]*p1[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]-57.86919517325254*p2[2]*p0[3]*p1[3]-19.28973172441751*p2[1]*p0[3]*p1[3]+25.2561873607241*p0[1]*p2[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]+37.88428104108615*p1[2]*p2[2]*p0[3]-12.62809368036205*p1[1]*p2[2]*p0[3]+12.62809368036205*p2[1]*p1[2]*p0[3]-4.209364560120682*p1[1]*p2[1]*p0[3]-16.53405576378644*p0[1]*p1[2]*p2[2]+5.511351921262148*p0[1]*p1[1]*p2[2]-5.511351921262148*p0[1]*p2[1]*p1[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[12] = dv_tot*(44.19832788126717*p0[3]*p1[3]*p2[3]-19.28973172441751*p0[1]*p1[3]*p2[3]-19.28973172441751*p1[1]*p0[3]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]-28.93459758662627*p2[2]*p0[3]*p1[3]+9.644865862208757*p2[1]*p0[3]*p1[3]+12.62809368036205*p0[1]*p2[2]*p1[3]-4.209364560120682*p0[1]*p2[1]*p1[3]+12.62809368036205*p1[1]*p2[2]*p0[3]-4.209364560120682*p1[1]*p2[1]*p0[3]-5.511351921262148*p0[1]*p1[1]*p2[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[13] = dv_tot*((-22.09916394063358*p0[3]*p1[3]*p2[3])+9.644865862208757*p0[1]*p1[3]*p2[3]+9.644865862208757*p1[1]*p0[3]*p2[3]-4.209364560120682*p0[1]*p1[1]*p2[3]+9.644865862208757*p2[1]*p0[3]*p1[3]-4.209364560120682*p0[1]*p2[1]*p1[3]-4.209364560120682*p1[1]*p2[1]*p0[3]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[14] = dv_tot*(44.19832788126717*p0[3]*p1[3]*p2[3]-19.28973172441751*p0[1]*p1[3]*p2[3]-19.28973172441751*p1[1]*p0[3]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]+28.93459758662627*p2[2]*p0[3]*p1[3]+9.644865862208757*p2[1]*p0[3]*p1[3]-12.62809368036205*p0[1]*p2[2]*p1[3]-4.209364560120682*p0[1]*p2[1]*p1[3]-12.62809368036205*p1[1]*p2[2]*p0[3]-4.209364560120682*p1[1]*p2[1]*p0[3]+5.511351921262148*p0[1]*p1[1]*p2[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[15] = dv_tot*((-88.39665576253434*p0[3]*p1[3]*p2[3])+38.57946344883504*p0[1]*p1[3]*p2[3]-57.86919517325254*p1[2]*p0[3]*p2[3]-19.28973172441751*p1[1]*p0[3]*p2[3]+25.2561873607241*p0[1]*p1[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]+57.86919517325254*p2[2]*p0[3]*p1[3]-19.28973172441751*p2[1]*p0[3]*p1[3]-25.2561873607241*p0[1]*p2[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]+37.88428104108615*p1[2]*p2[2]*p0[3]+12.62809368036205*p1[1]*p2[2]*p0[3]-12.62809368036205*p2[1]*p1[2]*p0[3]-4.209364560120682*p1[1]*p2[1]*p0[3]-16.53405576378644*p0[1]*p1[2]*p2[2]-5.511351921262148*p0[1]*p1[1]*p2[2]+5.511351921262148*p0[1]*p2[1]*p1[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[16] = dv_tot*(44.19832788126717*p0[3]*p1[3]*p2[3]-19.28973172441751*p0[1]*p1[3]*p2[3]+28.93459758662627*p1[2]*p0[3]*p2[3]+9.644865862208757*p1[1]*p0[3]*p2[3]-12.62809368036205*p0[1]*p1[2]*p2[3]-4.209364560120682*p0[1]*p1[1]*p2[3]-19.28973172441751*p2[1]*p0[3]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]-12.62809368036205*p2[1]*p1[2]*p0[3]-4.209364560120682*p1[1]*p2[1]*p0[3]+5.511351921262148*p0[1]*p2[1]*p1[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[17] = dv_tot*((-88.39665576253434*p0[3]*p1[3]*p2[3])+38.57946344883504*p0[1]*p1[3]*p2[3]-57.86919517325254*p1[2]*p0[3]*p2[3]-19.28973172441751*p1[1]*p0[3]*p2[3]+25.2561873607241*p0[1]*p1[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]-57.86919517325254*p2[2]*p0[3]*p1[3]-19.28973172441751*p2[1]*p0[3]*p1[3]+25.2561873607241*p0[1]*p2[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]-37.88428104108615*p1[2]*p2[2]*p0[3]-12.62809368036205*p1[1]*p2[2]*p0[3]-12.62809368036205*p2[1]*p1[2]*p0[3]-4.209364560120682*p1[1]*p2[1]*p0[3]+16.53405576378644*p0[1]*p1[2]*p2[2]+5.511351921262148*p0[1]*p1[1]*p2[2]+5.511351921262148*p0[1]*p2[1]*p1[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[18] = dv_tot*(176.7933115250687*p0[3]*p1[3]*p2[3]+115.7383903465051*p0[2]*p1[3]*p2[3]+38.57946344883504*p0[1]*p1[3]*p2[3]-115.7383903465051*p1[2]*p0[3]*p2[3]+38.57946344883504*p1[1]*p0[3]*p2[3]-75.7685620821723*p0[2]*p1[2]*p2[3]-25.2561873607241*p0[1]*p1[2]*p2[3]+25.2561873607241*p1[1]*p0[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]-115.7383903465051*p2[2]*p0[3]*p1[3]+38.57946344883504*p2[1]*p0[3]*p1[3]-75.7685620821723*p0[2]*p2[2]*p1[3]-25.2561873607241*p0[1]*p2[2]*p1[3]+25.2561873607241*p2[1]*p0[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]+75.7685620821723*p1[2]*p2[2]*p0[3]-25.2561873607241*p1[1]*p2[2]*p0[3]-25.2561873607241*p2[1]*p1[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]+49.60216729135932*p0[2]*p1[2]*p2[2]+16.53405576378644*p0[1]*p1[2]*p2[2]-16.53405576378644*p1[1]*p0[2]*p2[2]-5.511351921262148*p0[1]*p1[1]*p2[2]-16.53405576378644*p2[1]*p0[2]*p1[2]-5.511351921262148*p0[1]*p2[1]*p1[2]+5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[19] = dv_tot*((-88.39665576253434*p0[3]*p1[3]*p2[3])-57.86919517325254*p0[2]*p1[3]*p2[3]-19.28973172441751*p0[1]*p1[3]*p2[3]+57.86919517325254*p1[2]*p0[3]*p2[3]-19.28973172441751*p1[1]*p0[3]*p2[3]+37.88428104108615*p0[2]*p1[2]*p2[3]+12.62809368036205*p0[1]*p1[2]*p2[3]-12.62809368036205*p1[1]*p0[2]*p2[3]-4.209364560120682*p0[1]*p1[1]*p2[3]+38.57946344883504*p2[1]*p0[3]*p1[3]+25.2561873607241*p2[1]*p0[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]-25.2561873607241*p2[1]*p1[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]-16.53405576378644*p2[1]*p0[2]*p1[2]-5.511351921262148*p0[1]*p2[1]*p1[2]+5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[20] = dv_tot*(176.7933115250687*p0[3]*p1[3]*p2[3]+115.7383903465051*p0[2]*p1[3]*p2[3]+38.57946344883504*p0[1]*p1[3]*p2[3]-115.7383903465051*p1[2]*p0[3]*p2[3]+38.57946344883504*p1[1]*p0[3]*p2[3]-75.7685620821723*p0[2]*p1[2]*p2[3]-25.2561873607241*p0[1]*p1[2]*p2[3]+25.2561873607241*p1[1]*p0[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]+115.7383903465051*p2[2]*p0[3]*p1[3]+38.57946344883504*p2[1]*p0[3]*p1[3]+75.7685620821723*p0[2]*p2[2]*p1[3]+25.2561873607241*p0[1]*p2[2]*p1[3]+25.2561873607241*p2[1]*p0[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]-75.7685620821723*p1[2]*p2[2]*p0[3]+25.2561873607241*p1[1]*p2[2]*p0[3]-25.2561873607241*p2[1]*p1[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]-49.60216729135932*p0[2]*p1[2]*p2[2]-16.53405576378644*p0[1]*p1[2]*p2[2]+16.53405576378644*p1[1]*p0[2]*p2[2]+5.511351921262148*p0[1]*p1[1]*p2[2]-16.53405576378644*p2[1]*p0[2]*p1[2]-5.511351921262148*p0[1]*p2[1]*p1[2]+5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[21] = dv_tot*((-88.39665576253434*p0[3]*p1[3]*p2[3])-57.86919517325254*p0[2]*p1[3]*p2[3]-19.28973172441751*p0[1]*p1[3]*p2[3]+38.57946344883504*p1[1]*p0[3]*p2[3]+25.2561873607241*p1[1]*p0[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]+57.86919517325254*p2[2]*p0[3]*p1[3]-19.28973172441751*p2[1]*p0[3]*p1[3]+37.88428104108615*p0[2]*p2[2]*p1[3]+12.62809368036205*p0[1]*p2[2]*p1[3]-12.62809368036205*p2[1]*p0[2]*p1[3]-4.209364560120682*p0[1]*p2[1]*p1[3]-25.2561873607241*p1[1]*p2[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]-16.53405576378644*p1[1]*p0[2]*p2[2]-5.511351921262148*p0[1]*p1[1]*p2[2]+5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[22] = dv_tot*(44.19832788126717*p0[3]*p1[3]*p2[3]+28.93459758662627*p0[2]*p1[3]*p2[3]+9.644865862208757*p0[1]*p1[3]*p2[3]-19.28973172441751*p1[1]*p0[3]*p2[3]-12.62809368036205*p1[1]*p0[2]*p2[3]-4.209364560120682*p0[1]*p1[1]*p2[3]-19.28973172441751*p2[1]*p0[3]*p1[3]-12.62809368036205*p2[1]*p0[2]*p1[3]-4.209364560120682*p0[1]*p2[1]*p1[3]+8.418729120241366*p1[1]*p2[1]*p0[3]+5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[23] = dv_tot*((-88.39665576253434*p0[3]*p1[3]*p2[3])-57.86919517325254*p0[2]*p1[3]*p2[3]-19.28973172441751*p0[1]*p1[3]*p2[3]+38.57946344883504*p1[1]*p0[3]*p2[3]+25.2561873607241*p1[1]*p0[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]-57.86919517325254*p2[2]*p0[3]*p1[3]-19.28973172441751*p2[1]*p0[3]*p1[3]-37.88428104108615*p0[2]*p2[2]*p1[3]-12.62809368036205*p0[1]*p2[2]*p1[3]-12.62809368036205*p2[1]*p0[2]*p1[3]-4.209364560120682*p0[1]*p2[1]*p1[3]+25.2561873607241*p1[1]*p2[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]+16.53405576378644*p1[1]*p0[2]*p2[2]+5.511351921262148*p0[1]*p1[1]*p2[2]+5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[24] = dv_tot*(176.7933115250687*p0[3]*p1[3]*p2[3]+115.7383903465051*p0[2]*p1[3]*p2[3]+38.57946344883504*p0[1]*p1[3]*p2[3]+115.7383903465051*p1[2]*p0[3]*p2[3]+38.57946344883504*p1[1]*p0[3]*p2[3]+75.7685620821723*p0[2]*p1[2]*p2[3]+25.2561873607241*p0[1]*p1[2]*p2[3]+25.2561873607241*p1[1]*p0[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]-115.7383903465051*p2[2]*p0[3]*p1[3]+38.57946344883504*p2[1]*p0[3]*p1[3]-75.7685620821723*p0[2]*p2[2]*p1[3]-25.2561873607241*p0[1]*p2[2]*p1[3]+25.2561873607241*p2[1]*p0[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]-75.7685620821723*p1[2]*p2[2]*p0[3]-25.2561873607241*p1[1]*p2[2]*p0[3]+25.2561873607241*p2[1]*p1[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]-49.60216729135932*p0[2]*p1[2]*p2[2]-16.53405576378644*p0[1]*p1[2]*p2[2]-16.53405576378644*p1[1]*p0[2]*p2[2]-5.511351921262148*p0[1]*p1[1]*p2[2]+16.53405576378644*p2[1]*p0[2]*p1[2]+5.511351921262148*p0[1]*p2[1]*p1[2]+5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[25] = dv_tot*((-88.39665576253434*p0[3]*p1[3]*p2[3])-57.86919517325254*p0[2]*p1[3]*p2[3]-19.28973172441751*p0[1]*p1[3]*p2[3]-57.86919517325254*p1[2]*p0[3]*p2[3]-19.28973172441751*p1[1]*p0[3]*p2[3]-37.88428104108615*p0[2]*p1[2]*p2[3]-12.62809368036205*p0[1]*p1[2]*p2[3]-12.62809368036205*p1[1]*p0[2]*p2[3]-4.209364560120682*p0[1]*p1[1]*p2[3]+38.57946344883504*p2[1]*p0[3]*p1[3]+25.2561873607241*p2[1]*p0[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]+25.2561873607241*p2[1]*p1[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]+16.53405576378644*p2[1]*p0[2]*p1[2]+5.511351921262148*p0[1]*p2[1]*p1[2]+5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
  jacob_vel_gauss[26] = dv_tot*(176.7933115250687*p0[3]*p1[3]*p2[3]+115.7383903465051*p0[2]*p1[3]*p2[3]+38.57946344883504*p0[1]*p1[3]*p2[3]+115.7383903465051*p1[2]*p0[3]*p2[3]+38.57946344883504*p1[1]*p0[3]*p2[3]+75.7685620821723*p0[2]*p1[2]*p2[3]+25.2561873607241*p0[1]*p1[2]*p2[3]+25.2561873607241*p1[1]*p0[2]*p2[3]+8.418729120241366*p0[1]*p1[1]*p2[3]+115.7383903465051*p2[2]*p0[3]*p1[3]+38.57946344883504*p2[1]*p0[3]*p1[3]+75.7685620821723*p0[2]*p2[2]*p1[3]+25.2561873607241*p0[1]*p2[2]*p1[3]+25.2561873607241*p2[1]*p0[2]*p1[3]+8.418729120241366*p0[1]*p2[1]*p1[3]+75.7685620821723*p1[2]*p2[2]*p0[3]+25.2561873607241*p1[1]*p2[2]*p0[3]+25.2561873607241*p2[1]*p1[2]*p0[3]+8.418729120241366*p1[1]*p2[1]*p0[3]+49.60216729135932*p0[2]*p1[2]*p2[2]+16.53405576378644*p0[1]*p1[2]*p2[2]+16.53405576378644*p1[1]*p0[2]*p2[2]+5.511351921262148*p0[1]*p1[1]*p2[2]+16.53405576378644*p2[1]*p0[2]*p1[2]+5.511351921262148*p0[1]*p2[1]*p1[2]+5.511351921262148*p1[1]*p2[1]*p0[2]+1.837117307087383*p0[1]*p1[1]*p2[1]);
} 

typedef void (*vmap_cubic_t)(const double *dv, const double *v_cubic_dir[3], double* GKYL_RESTRICT vmap, double* GKYL_RESTRICT jacob_vel_inv, 
    double* GKYL_RESTRICT vmap_pgkyl, double* GKYL_RESTRICT jacob_vel_pgkyl, 
    double* GKYL_RESTRICT vmap_avg_pgkyl, double* GKYL_RESTRICT jacob_vel_avg_pgkyl, 
    double* GKYL_RESTRICT jacob_vel_gauss);

// for use in kernel tables
typedef struct { vmap_cubic_t kernels[1]; } vmap_cubic_kern_list;

static const vmap_cubic_kern_list vmap_cubic_list[] = {
  { kernel_vmap_1v },
  { kernel_vmap_2v },
  { kernel_vmap_3v }
};

static vmap_cubic_t
choose_vmap_kern(int vdim)
{
  return vmap_cubic_list[vdim-1].kernels[0];
}
