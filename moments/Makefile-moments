# -*- makefile-gmake -*-

SRC_DIRS := zero kernels apps amr

PREFIX ?= ${HOME}/gkylsoft
SUPERLU_INC = $(PREFIX)/superlu/include
ifeq ($(UNAME_S),Linux)
	SUPERLU_LIB_DIR = $(PREFIX)/superlu/lib64
	SUPERLU_LIB = $(PREFIX)/superlu/lib64/libsuperlu.a
else
	SUPERLU_LIB_DIR = $(PREFIX)/superlu/lib
	SUPERLU_LIB = $(PREFIX)/superlu/lib/libsuperlu.a
endif

LLIB := ../$(BUILD_DIR)/moments/libg0moments.so
SLLIB := ../$(BUILD_DIR)/moments/libg0moments.a
SRCS := $(shell find $(SRC_DIRS) -name *.c)
ifdef USING_NVCC
	SRCS += $(shell find $(SRC_DIRS) -name *.cu)
endif
OBJS := $(SRCS:%=../$(BUILD_DIR)/moments/%.o)
DEPS := $(OBJS:.o=.d)

UNITS := $(patsubst %.c,../${BUILD_DIR}/moments/%,$(wildcard unit/ctest_*.c))
MPI_UNITS := $(patsubst %.c,../${BUILD_DIR}/moments/%,$(wildcard unit/mctest_*.c))
LUA_UNITS := $(patsubst %.c,../${BUILD_DIR}/moments/%,$(wildcard unit/lctest_*.c))

# We need to build CUDA unit-test objects                                                                                                                                            
UNIT_CU_SRCS =
UNIT_CU_OBJS =
ifdef USING_NVCC
    UNIT_CU_SRCS = unit/ctest_wave_geom_cu.cu unit/ctest_wv_euler_cu.cu unit/ctest_wv_maxwell_cu.cu unit/ctest_wv_ten_moment_cu.cu
    UNIT_CU_OBJS = $(UNIT_CU_SRCS:%=../$(BUILD_DIR)/moments/%.o)
endif

REGS := $(patsubst %.c,../${BUILD_DIR}/moments/%,$(wildcard creg/rt_*.c))
AMR_REGS := $(patsubst %.c,../${BUILD_DIR}/moments/%,$(wildcard amr_creg/rt_*.c))

KERN_INC_DIRS = $(shell find kernels -type d)
KERN_INCLUDES = $(addprefix -I,$(KERN_INC_DIRS))
EXT_INCS := -I${MPI_INC_DIR} -I${NCCL_INC_DIR} -I${CUDSS_INC_DIR} -I${LUA_INC_DIR} -I${LAPACK_INC}
CORE_INCS := -I../core/kernels/array_average -I../core/kernels/array_integrate -I../core/kernels/basis -I../core/kernels/bin_op -I../core/kernels/dg_interpolate -I../core/kernels/skin_surf_from_ghost -I../core/apps -I../core/zero -I../core/minus -I../core/minus/STC/include -I../zero
INCS := ${EXT_INCS} ${CORE_INCS} -Izero -Iapps -Icreg -Ikernels -Iamr -I${SUPERLU_INC} $(KERN_INCLUDES)

CORE_LIB_DIR := -L../${BUILD_DIR}/core
CORE_LIB := -lg0core

EXEC_LIB_DIRS = -L${SUPERLU_LIB_DIR} -L${MPI_LIB_DIR} -L${NCCL_LIB_DIR} -L${CUDSS_LIB_DIR} -L${LUA_LIB_DIR}
EXEC_EXT_LIBS = -lsuperlu ${LAPACK_LIB} ${CUDA_LIBS} ${MPI_RPATH} ${MPI_LIBS} ${NCCL_LIBS} ${CUDSS_RPATH} ${CUDSS_LIBS} ${LUA_RPATH} ${LUA_LIBS} -lm -lpthread -ldl
EXEC_LIBS = -L../${BUILD_DIR}/moments ${LLIB} ${SLLIB} ${CORE_LIB_DIR} ${CORE_LIB} ${EXEC_EXT_LIBS}

LDFLAGS += -Wl,-rpath,./${BUILD_DIR}/core
LDFLAGS += -Wl,-rpath,./${BUILD_DIR}/moments

LDFLAGS += -Wl,-rpath,../${BUILD_DIR}/core
LDFLAGS += -Wl,-rpath,../${BUILD_DIR}/moments

unit: ${LLIB} ${SLLIB} $(UNITS) ${MPI_UNITS} ## Build unit tests
regression: ${LLIB} ${SLLIB} ${REGS} creg/rt_arg_parse.h ## Build regression tests
amr_regression: ${LLIB} ${SLLIB} ${AMR_REGS} ## Build AMR regression tests

.PHONY: all
all: $(LLIB) $(SLLIB) ## Build all targets
.DEFAULT_GOAL := all

# c -> o files
../$(BUILD_DIR)/moments/%.c.o: %.c
	$(MKDIR_P) $(dir $@)
	$(CC) -c $(CFLAGS) $(ARCH_FLAGS) $(INCS) $< -o $@

# Build commands for CUDA source                                                                                                                                                     
../$(BUILD_DIR)/moments/%.cu.o: %.cu
	$(MKDIR_P) $(dir $@)
	$(CC) -c $(CFLAGS) $(NVCC_FLAGS) $(INCS) $< -o $@

# Unit tests
$(UNITS): ../${BUILD_DIR}/moments/unit/%: unit/%.c $(LLIB) $(SLLIB) ${UNIT_CU_OBJS}
	$(MKDIR_P) ../${BUILD_DIR}/moments/unit
	${CC} ${CFLAGS} ${LDFLAGS} -o $@ $< -I. $(INCS) ${UNIT_CU_OBJS} ${EXEC_LIB_DIRS} ${EXEC_LIBS}

# MPI unit tests
$(MPI_UNITS): ../${BUILD_DIR}/moments/unit/%: unit/%.c $(LLIB) $(SLLIB)
	$(MKDIR_P) ../${BUILD_DIR}/moments/unit
	${CC} ${CFLAGS} ${LDFLAGS} -o $@ $< -I. $(INCS) ${EXEC_LIB_DIRS} ${EXEC_LIBS}

# Regression tests
$(REGS): ../${BUILD_DIR}/moments/creg/%: creg/%.c $(LLIB) $(SLLIB)
	$(MKDIR_P) ../${BUILD_DIR}/moments/creg
	${CC} ${CFLAGS} ${LDFLAGS} -o $@ $< -I. $(INCS) ${EXEC_LIB_DIRS} ${EXEC_LIBS}

# AMR regression tests
$(AMR_REGS): ../${BUILD_DIR}/moments/amr_creg/%: amr_creg/%.c $(LLIB) $(SLLIB)
	$(MKDIR_P) ../${BUILD_DIR}/moments/amr_creg
	${CC} ${CFLAGS} ${LDFLAGS} -o $@ $< -I. $(INCS) ${EXEC_LIB_DIRS} ${EXEC_LIBS}

ifdef USING_NVCC
../$(BUILD_DIR)/moments/kernels/fem_poisson/%.c.o : kernels/fem_poisson/%.c
	$(MKDIR_P) $(dir $@)
	$(CC) $(CFLAGS) $(NVCC_FLAGS) $(INCS) -c $< -o $@
endif

# build lib
$(LLIB): $(OBJS)
	$(MKDIR_P) $(dir $@)
ifeq ($(UNAME),Linux)
ifdef USING_NVCC
	$(CC) -shared -o $@ ../$(BUILD_DIR)/core/*/*.o ../$(BUILD_DIR)/core/*/*/*.o ../$(BUILD_DIR)/moments/*/*.o ../$(BUILD_DIR)/moments/*/*/*.o -Xlinker=-soname -Xlinker=libg0moments.so -L${SUPERLU_LIB_DIR} -L${MPI_LIB_DIR} -L${NCCL_LIB_DIR} -L${CUDSS_LIB_DIR} -L${LUA_LIB_DIR} -L${LAPACK_LIB_DIR} ${CORE_LIB_DIR} ${CORE_LIB} -lsuperlu ${LAPACK_LIB} ${CUDA_LIBS} ${MPI_RPATH} ${MPI_LIBS} ${NCCL_LIBS} ${CUDSS_RPATH} ${CUDSS_LIBS} ${LUA_RPATH} ${LUA_LIBS} -lm -lpthread -ldl -arch=sm_${CUDA_ARCH} -rdc=true --compiler-options="-fPIC"
else
	$(CC) -shared -o $@ ../$(BUILD_DIR)/core/*/*.o ../$(BUILD_DIR)/core/*/*/*.o ../$(BUILD_DIR)/moments/*/*.o ../$(BUILD_DIR)/moments/*/*/*.o -Wl,-soname,libg0moments.so -L${SUPERLU_LIB_DIR} -L${MPI_LIB_DIR} -L${NCCL_LIB_DIR} -L${CUDSS_LIB_DIR} -L${LUA_LIB_DIR} -L${LAPACK_LIB_DIR} ${CORE_LIB_DIR} ${CORE_LIB} -lsuperlu ${LAPACK_LIB} ${CUDA_LIBS} ${MPI_RPATH} ${MPI_LIBS} ${NCCL_LIBS} ${CUDSS_RPATH} ${CUDSS_LIBS} ${LUA_RPATH} ${LUA_LIBS} -lm -lpthread -ldl
endif
else
	$(CC) -shared -o $@ ../$(BUILD_DIR)/core/*/*.o ../$(BUILD_DIR)/core/*/*/*.o ../$(BUILD_DIR)/moments/*/*.o ../$(BUILD_DIR)/moments/*/*/*.o -Wl,-install_name,@rpath/libg0moments.so -L${SUPERLU_LIB_DIR} -L${MPI_LIB_DIR} -L${NCCL_LIB_DIR} -L${CUDSS_LIB_DIR} -L${LUA_LIB_DIR} -L${LAPACK_LIB_DIR} ${CORE_LIB_DIR} ${CORE_LIB} -lsuperlu ${LAPACK_LIB} ${CUDA_LIBS} ${MPI_RPATH} ${MPI_LIBS} ${NCCL_LIBS} ${CUDSS_RPATH} ${CUDSS_LIBS} ${LUA_RPATH} ${LUA_LIBS} -lm -lpthread -ldl
endif

$(SLLIB): $(OBJS)
	$(MKDIR_P) $(dir $@)
	ar -crs $@ ../$(BUILD_DIR)/core/*/*.o ../$(BUILD_DIR)/core/*/*/*.o ../$(BUILD_DIR)/moments/*/*.o ../$(BUILD_DIR)/moments/*/*/*.o

.PHONY: check valcheck
# Run all unit tests
check: unit ## Build (if needed) and run all unit tests
	$(foreach unit,${UNITS},echo $(unit); $(unit) -E;)

valcheck: unit ## Run valgrind on unit test
	$(foreach unit,$(UNITS),valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --show-error-list=yes $(unit) --exec=never 2>$(unit)_val_err 1>/dev/null;)
	$(foreach unit,$(UNITS),../core/minus/checkval.sh $(unit);)

-include $(DEPS)

# Headers to install
INSTALL_HEADERS := $(shell ls apps/gkyl_*.h zero/gkyl_*.h amr/gkyl_*.h kernels/*/gkyl_*.h | grep -v "priv" | sort)

.PHONY: install
install: all
# Construct install 
	$(MKDIR_P) ${INSTALL_PREFIX}/${PROJ_NAME}/include
	${MKDIR_P} ${INSTALL_PREFIX}/${PROJ_NAME}/lib
	${MKDIR_P} ${INSTALL_PREFIX}/${PROJ_NAME}/bin
	${MKDIR_P} ${INSTALL_PREFIX}/${PROJ_NAME}/share
# Headers
	cp ${INSTALL_HEADERS} ${INSTALL_PREFIX}/${PROJ_NAME}/include
# libraries
	cp -f $(LLIB) ${INSTALL_PREFIX}/${PROJ_NAME}/lib/libg0moments.so
	cp -f $(SLLIB) ${INSTALL_PREFIX}/${PROJ_NAME}/lib/libg0moments.a

.PHONY: clean
clean: ## Clean build output
	rm -rf ../${BUILD_DIR}/moments